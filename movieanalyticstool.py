# -*- coding: utf-8 -*-
"""MovieAnalyticsTool.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QYvfJU6z0YmPvgrkhJbbDhDjD-Wj4G80
"""

# Zachary Patrone
# 10/18/2021
# Movie analytics tool that allows the user to search for a movie of their 
#   choosing and obtain further information about it using online data and 
#   text analytics. Data from OMDB API.


!pip install xmltodict
import json, matplotlib.pyplot as plt, nltk, requests, skimage.io, textblob, wordcloud, xmltodict
nltk.download("punkt")

print("Welcome to the movie analytics tool!")

repeat = ["yes", "yess", "yyes"]
answer = "yes"

while answer in repeat:

    movie = input("What movie would you like to analyze? ")
    analysis = input("What would you like to see? (background, reception, poster, wordcloud, sentiment) ")
    movie = movie.lower()
    analysis = analysis.lower()

    # Access the data for the specific movie
    response_movie = requests.get("https://www.omdbapi.com/?r=xml&apikey=ebd20d99&t=" + movie)
    response_reviews = requests.get("https://dgoldberg.sdsu.edu/515/imdb/" + movie + ".json")

    # Correct for misspelled word
    background = ["background", "backgrund", "bckground"]
    poster = ["poster", "pster", "postr"]
    reception = ["reception", "recption", "recetion"]
    wc = ["wordcloud", "wodcloud", "wordclod"]
    sentiment = ["sentiment", "sentment", "sentimentt"]


    # If user asks for background, poster, or reception
    if analysis in background or poster or reception:

        if response_movie:
            
            data = xmltodict.parse(response_movie.text)


            if analysis in background:
                year = data["root"]["movie"]["@year"]
                print("Year:", year)

                rating = data["root"]["movie"]["@rated"]
                print("Rating:", rating)

                runtime = data["root"]["movie"]["@runtime"]
                print("Runtime:", runtime)

                genre = data["root"]["movie"]["@genre"]
                print("Genre:", genre)

                actors = data["root"]["movie"]["@actors"]
                print("Actors/Actresses:", actors)

                plot = data["root"]["movie"]["@plot"]
                print("Plot:", plot)

            if analysis in poster:
                poster = data["root"]["movie"]["@poster"]
                image = skimage.io.imread(poster)
                plt.imshow(image, interpolation = "bilinear")
                plt.axis("off")
                plt.show()

            if analysis in reception:
                awards = data["root"]["movie"]["@awards"]
                print("Awards:", awards)

                metascore = data["root"]["movie"]["@metascore"]
                print("Metascore:", metascore)

                imdb = data["root"]["movie"]["@imdbRating"]
                print("IMBD Rating:", imdb)
        else:
            print("Sorry, connection error to ombapi.com")


    # If users requests sentiment analysis or word cloud creation
    elif analysis in wc or sentiment:

        if response_reviews:   
            data2 = json.loads(response_reviews.text)


            text = ""
            for line in data2:
                review = line["Review text"]
                text += review + " "

            if analysis in wc:
                addition = ["movie", "film"]
                wordcloud.STOPWORDS.update(addition)

                cloud = wordcloud.WordCloud(width = 2000, height = 2000, background_color = "black", colormap = "inferno")
                cloud.generate(text)

                plt.imshow(cloud, interpolation = "bilinear")
                plt.axis("off")
                plt.show()

            if analysis in sentiment: 
                    blob = textblob.TextBlob(text)

                    print("Average IMDb reveiw polarity:", blob.polarity)
                    print("Average IMDb reveiw subjectivity:", blob.subjectivity)


        else:
            print("Sorry, the tool could not successfully load and IMDb reviews for this movie. Please try another analysis or movie.")

    else:
        print("Sorry, that analysis is not supported. Please try again.")

    answer = input("Would you like to run another anaylsis? (yes/no) ")
    answer = answer.lower()